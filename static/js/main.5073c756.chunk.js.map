{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Expense.js","components/Listing.js","helpers.js","components/BudgetControl.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","protoTypes","PropTypes","string","isRequxired","Question","setBudget","setRemaining","setShowQuestion","useState","amount","setAmount","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","func","isRequired","id","Form","setExpense","setCreateExpense","name","setName","trim","Expense","expense","object","Listing","expenses","map","key","array","handleBudget","budget","remaining","BudgetControl","number","App","showQuestion","setExpenses","createExpense","useEffect","remainingBudget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.5073c756.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from \"prop-types\"\n \nconst Error = ({message}) => (\n    <p className=\"alert alert-danger error\">{message}</p>\n)\n\nError.protoTypes = {\n    message: PropTypes.string.isRequxired\n}\n \nexport default Error","import React, {Fragment, useState} from 'react'\nimport PropTypes from \"prop-types\"\nimport Error from \"./Error\"\n\nconst Question = ({setBudget, setRemaining, setShowQuestion}) => {\n\n    // Local Question state\n    const [amount, setAmount] = useState(0)\n    const [error, setError] = useState(false)\n\n    // Handle Budget change\n    const defineBudget = e => {\n        setAmount(parseInt(e.target.value, 10))\n    }\n\n    // Hanlde Budget Submit\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        // Validate\n        if(amount < 1 || isNaN(amount)) {\n            setError(true)\n            return\n        }\n\n        // Validation passed \n        setError(false)\n        setBudget(amount)\n        setRemaining(amount)\n        setShowQuestion(false)\n    }\n\n    return (  \n        <Fragment>\n            <h2>Define your budget</h2>\n            {error ? <Error message=\"Wrong Budget\"/> : null}\n            <form\n                onSubmit={handleSubmit}\n            >\n                <input\n                    type=\"number\"\n                    className=\"u-full-width\"\n                    placeholder=\"Define your budget\"\n                    onChange={defineBudget}\n                />\n                <input \n                    type=\"submit\"\n                    className=\"button-primary u-full-width\"\n                    value=\"Submit Budget\"\n                />\n            </form>\n        </Fragment>\n    )\n}\n\nQuestion.protoTypes = {\n    setBudget: PropTypes.func.isRequired,\n    setRemaining: PropTypes.func.isRequired,\n    setShowQuestion: PropTypes.func.isRequired\n}\n \nexport default Question\n\n","import React, {useState} from 'react'\nimport PropTypes from \"prop-types\"\nimport Error from \"./Error\"\n\n\nlet id = 1\n\nconst Form = ({setExpense, setCreateExpense}) => {\n\n    const [name, setName] = useState(\"\")\n    const [amount, setAmount] = useState(0)\n    const [error, setError] = useState(false)\n\n    // Handle on Expense submit\n    const addExpense = e => {\n        e.preventDefault()\n\n        // Validate\n        if(amount < 1 || isNaN(amount) || name.trim() === \"\") {\n            setError(true)\n            return\n        }\n \n        // Construct the expense \n        setError(false)\n \n        // Send the Expense to App\n        const expense = {\n            name,\n            amount,\n            id\n        }\n        setExpense(expense)\n        setCreateExpense(true)\n\n        // Update id\n        id = id + 1 \n\n        // Reset form \n        setName(\"\")\n        setAmount(0)\n    }\n\n    return (\n        <form\n            onSubmit={addExpense}\n        >\n            <h2>Add your expenses here</h2>\n\n            { error ? <Error message=\"Both fields are mandatory or Wrong Amount\" /> : null}\n\n            <div className=\"field\">\n                <label>Expense Description</label>\n                <input \n                    type=\"text\"\n                    className=\"u-full-width\"\n                    placeholder=\"Ex. Transportation\"\n                    value={name}\n                    onChange={e => setName(e.target.value)}\n                />\n            </div>\n            <div className=\"field\">\n                <label>Expense Amount</label>\n                <input \n                    type=\"number\"\n                    className=\"u-full-width\"\n                    placeholder=\"Ex. 300\"\n                    value={amount}\n                    onChange={e => setAmount(parseInt(e.target.value))}\n                />\n            </div>\n            <input\n                type=\"submit\"\n                className=\"button-primary u-full-width\"\n                value=\"Add Expense\"\n            />\n        </form>\n    )\n}\n\nForm.protoTypes = {\n    setExpense: PropTypes.func.isRequired,\n    setCreateExpense: PropTypes.func.isRequired\n}\n \nexport default Form\n","import React from 'react'\nimport PropTypes from \"prop-types\"\n\nconst Expense = ({expense}) => (\n    <li className=\"expenses\">\n        <p>\n            {expense.name}\n            <span className=\"expense\">$ {expense.amount}</span>\n        </p>\n    </li>\n)\n\nExpense.protoTypes = {\n    expense: PropTypes.object.isRequired\n}\n \nexport default Expense","import React from 'react'\nimport Expense from \"./Expense\"\nimport PropTypes from \"prop-types\"\n\nconst Listing = ({expenses}) => (\n    <div className=\"done-expenses\">\n        <h2>List</h2>\n        {expenses.map(expense => (\n            <Expense\n                key={expense.id}\n                expense={expense}\n            />\n        ))}\n\n    </div>\n)\n\nListing.protoTypes = {\n    expenses: PropTypes.array.isRequired\n}\n \nexport default Listing","// Return a class according to amount remaining \nexport const handleBudget = (budget, remaining) => {\n    let resultingClass\n\n    if ( (budget / 4) > remaining) {\n        resultingClass = \"alert alert-danger\"\n    } else if ((budget / 2) > remaining) {\n        resultingClass = \"alert alert-warning\"\n    } else {\n        resultingClass = \"alert alert-success\"\n    }\n\n    return resultingClass\n\n}\n\n\n\n","import React, {Fragment} from 'react'\nimport PropTypes from \"prop-types\"\nimport {handleBudget} from \"../helpers\"\n\nconst BudgetControl = ({budget, remaining}) => {\n    return (\n        <Fragment>\n            <div className=\"alert alert-primary\">\n                Budget: $ {budget}\n            </div>\n\n            <div className={handleBudget(budget, remaining)}>\n                Remaining: $ {remaining}\n            </div>\n        </Fragment>\n    )\n}\n\nBudgetControl.protoTypes = {\n    budget: PropTypes.number.isRequired,\n    remaining: PropTypes.number.isRequired\n}\n \nexport default BudgetControl","import React, {useState, useEffect} from 'react'\nimport Question from \"./components/Question\"\nimport Form from \"./components/Form\"\nimport Listing from \"./components/Listing\"\nimport BudgetControl from \"./components/BudgetControl\"\n\nfunction App() {\n\n  // Budget State\n  const [budget, setBudget] = useState(0)\n  const [remaining, setRemaining] = useState(0)\n  const [showQuestion, setShowQuestion] = useState(true)\n  const [expenses, setExpenses] = useState([])\n  const [expense, setExpense] = useState({})\n  const [createExpense, setCreateExpense] = useState(false)\n \n  // Handle remaining on change \n  useEffect(() => {\n    // Add new budget\n    if(createExpense) {\n      setExpenses([\n        ...expenses,\n        expense\n      ])\n\n      // Subtract from current budget\n      const remainingBudget = remaining - expense.amount\n      setRemaining(remainingBudget)\n\n      // Expense created\n      setCreateExpense(false)\n    }\n  }, [expense, createExpense, expenses, remaining])\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Weekly Expenses</h1>\n        <div className=\"main-content content\">\n\n        {showQuestion ? \n          (\n            <Question \n              setBudget={setBudget}\n              setRemaining={setRemaining}\n              setShowQuestion={setShowQuestion}\n            />\n          ) :\n          (\n            <div className=\"row\"> \n              <div className=\"one-half column\">\n                <Form  \n                  setExpense={setExpense}\n                  setCreateExpense={setCreateExpense}\n                />\n              </div>\n              <div className=\"one-half column\">\n                <Listing \n                  expenses={expenses}\n                />\n                <BudgetControl\n                  budget={budget}\n                  remaining={remaining}\n                />\n              </div>\n            </div>\n          )\n        }\n\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}